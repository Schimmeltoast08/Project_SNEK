[gd_scene load_steps=11 format=3 uid="uid://dddj0jy148j2l"]

[ext_resource type="Script" path="res://scenes/camera_2d.gd" id="1_dbdjp"]
[ext_resource type="Texture2D" uid="uid://83i01mrnbsjt" path="res://Entety sprites/Player/Robot_MC.png" id="2_dkc7v"]
[ext_resource type="Texture2D" uid="uid://uahyk0j2cwb7" path="res://static sprites/Tmp_death_screen.png" id="4_tuknr"]
[ext_resource type="Script" path="res://scenes/death_screen.gd" id="5_nksik"]
[ext_resource type="Texture2D" uid="uid://blyer02jjetmb" path="res://Entety sprites/Player/Robot_MC_outline.png" id="6_lrwgo"]

[sub_resource type="GDScript" id="GDScript_isu8i"]
script/source = "extends CharacterBody2D

signal player_health_Changed
signal player_died
var moveRight = Input.is_action_just_pressed(\"button_d\")
var moveLeft = Input.is_action_just_pressed(\"button_a\")
var moveUp = Input.is_action_just_pressed(\"button_w\")
var moveDown = Input.is_action_just_pressed(\"button_s\")
@onready var global_vars = $\"../Global_Vars\"


func _ready() -> void:
	$CoyoteTimer.wait_time = coyote_frames / 60.0
	

 	
	
#region Coyote Time Variables
var coyote_frames = 6  # How many in-air frames to allow jumping
var in_coyote = false  # Track whether we're in coyote time or not
var last_floor = false  # Last frame's on-floor state
var jumping
#endregion
#region General Functions

###----------------- usefull general functions -------------
# in this codeblock are functions that are usefull but godot does not have, like \"wait 4 seconds\"
func wait(seconds: float) -> void:
	await get_tree().create_timer(seconds).timeout
#--------------------------------------------------------
#endregion
#region Movement Variables
### <movement>
@export var speed = 600.0
@export var jump_force = -600.0
@export var max_walljump = 2 # remember to set it to \"is_on_floor()\" too ( a few lines down) 
@export_range(0,1) var deceleration = 0.2
@export_range(0,1) var acceleration = 0.2
@export_range(0,1) var deceleration_on_jump_release = 0.5
var invulnerable = false
var teleport_cooldown = false # true means you CAN'T teleport
var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")
var can_extraspeed = true # on pressing q, you get a lot faster. Later turn this to false (standart) and
							# activate it when the player unlocks the ability. Once used it enabels itself 
var prev_velocity: Vector2 = Vector2.ZERO
#endregion
#region Movement [WASD + Space + Walljump]

func _physics_process(delta):
	
	if not is_on_floor():
		velocity.y += gravity * delta

	if Input.is_action_just_pressed(\"button_space\") and (is_on_floor() or is_on_wall() or in_coyote) and max_walljump > 0:
		velocity.y = jump_force
		
		max_walljump -= 1
		jumping = true
	
	if is_on_floor() or is_on_wall():
		jumping = false

	if Input.is_action_pressed(\"button_q\") and can_extraspeed:
		extra_speed(300)
	
	if is_on_floor(): 
		max_walljump = 2
		
	if Input.is_action_just_released(\"button_space\") and velocity.y < 0:
		velocity.y *= deceleration_on_jump_release
		
	# this implements air hang
	if abs(velocity.y) < 50:
		gravity = 960
	else:
		gravity = 980
	
	if not is_on_floor():
		velocity.x = lerp(prev_velocity.x, velocity.x, 0.5)
		
	if !is_on_floor() and last_floor and !jumping:
		in_coyote = true
		$CoyoteTimer.start()

	var direction = Input.get_axis(\"button_a\", \"button_d\")
	if direction:
		velocity.x = move_toward(velocity.x,direction * speed, speed * acceleration)
	else:
		velocity.x = move_toward(velocity.x, 0, speed * deceleration) # if you put \"delta\" instead of \"speed\" it turns into an ice level
	
#region Coyote time


#endregion
	
	
	move_and_slide()
	prev_velocity = velocity
	last_floor = is_on_floor()

# </movement>
#endregion
#region Teleport [RC]
	if Input.is_action_just_pressed(\"mouse_RC\") and !teleport_cooldown:
		var moveRight = Input.is_action_pressed(\"button_d\")
		var moveLeft = Input.is_action_pressed(\"button_a\")
		var moveUp = Input.is_action_pressed(\"button_w\")
		var moveDown = Input.is_action_pressed(\"button_s\")
		var dirX = 0 # if you walk right or left
		var dirY = 0 # if you \"aim\" up or down with keys
		if(moveDown):
			dirY+=1
		if(moveUp):
			dirY-=1
		if(moveRight):
			dirX+=1
		if(moveLeft):
			dirX-=1
		print(dirX,dirY) 
		teleport_cooldown = true
		#print(\"move\")
		$Sprite2D.visible=false
		
		  # makes player invisible inbetween teleportd
		invulnerable = true
		for i in range (200):
			velocity=Vector2(0,0)
		teleport_to(position+Vector2(500*dirX,250*dirY), Vector2(dirX,dirY)) # 500 = teleport lenght
		await wait(2.5)  # 0.25 seconds delay (250ms)s)	
		teleport_cooldown = true
		$Sprite2D.visible=true
		
		invulnerable = false
		teleport_cooldown_func(2)

func teleport_cooldown_func(seconds):
	await wait(seconds)
	teleport_cooldown = false
	
	###### teleport fucntion
	
func teleport_to(new_position: Vector2, dir: Vector2):
	# Check if moving to the new position will collide with any object
	var max_iterationsx = 500 # makes so teleport to the right cant be negative\"to the left\"
	var iteration_countx = 0
	var max_iterationsy = 250 # so left teleport cant turn right
	var iteration_county = 0
	
	var new_position2 = new_position
	
	collision_mask = 4 # Makes the player able to teleport trough enemies
	
	var collision = test_move(global_transform, new_position2 - global_position)
	  #moves the character to the opposite way of the teleport until you can teleport
	var collision_x = test_move(global_transform, new_position2-Vector2(0,dir.y*250) - global_position)
	var collision_y = test_move(global_transform, new_position2-Vector2(dir.x*500,0) - global_position)
	# collision separate for x and y axis so teleport dont have to be 45 degres
	
	while collision_x and iteration_countx<= max_iterationsx: #changing the new position x untill not collide
		new_position2.x+=dir.x*-1
		collision_x = test_move(global_transform, new_position2-Vector2(0,dir.y*250) - global_position)
		iteration_countx +=1
		
	while collision_y and iteration_county <= max_iterationsy: #changing the new position y axis until not collide
		new_position2.y+=dir.y*-1
		collision_y = test_move(global_transform, new_position2-Vector2(dir.x*500,0) - global_position)
		iteration_county +=1
		
	print(\"Teleporting to:\", new_position2)
	
		# Create a Sprite2D instance to be a player dummy
	var Sprite2D4 = Sprite2D.new()
# texture
	Sprite2D4.texture = preload(\"res://Entety sprites/Player/Robot_MC.png\")  
# add it as a child to the main scene to not get influenced of characterbody2d position
	get_tree().root.add_child(Sprite2D4)

	Sprite2D4.global_position=Vector2(global_position) # looks the dummy on the position we pressed right click
	
	$Sprite2D.visible = false #  makes character invisible

	get_node(\"Camera2D/Sprite2D3\").visible = false # true to have a ghost follow the teleport
	#camera movment
	var tween = create_tween()
	tween.tween_property(get_node(\"Camera2D\"),\"global_position\", new_position2, .25)# makes camera move to new position in \".25 sec\"
	print(new_position2)
	await tween.finished # pause untill teleport is done
	global_position = new_position2 #moves player to new position
	print(new_position2)

	
	get_node(\"Camera2D\").global_position = global_position # moves camera back to follow player
	get_node(\"Camera2D\").offset = Vector2.ZERO
	get_node(\"Camera2D/Sprite2D3\").visible=false #makes camera invisible again if it was visible
	
	$Sprite2D.visible = true # makes character visible
	Sprite2D4.visible= false# makes dummy invisible
	get_tree().root.remove_child(Sprite2D4) #trying to remove the old dummy

	
	collision_mask = 6 # Make the player able to collide with enemy after teleport
#</teleport>
	
	
#endregion
#region Health and Attack
###<attack and health>
@onready var health_bar = $HUD/HealthBar

@export var maximum_player_health = 100 # maximum player health
@export var health = 100 # current player health
var getting_attacked = false
var alive = true # status if player is alive


func _on_enemy_rootnode_enemy_attack():
	if invulnerable == false: # for when teleporting and other immunity frames
		for i in range(10):
			take_damage(1)
			await wait(0.05)
		#health_bar.health = health
	print(\"Player took damage. Remaining: \", health,\"%\")
	
	
	
# manages player health
var prev_health




func take_damage(damage):
	player_health_Changed.emit(health, maximum_player_health)
	if alive and global_vars.enemy_near == true:
		prev_health = health
		health -= damage
		health_bar.value = lerp(prev_health,health,0.02)
		if health <= 0:
			alive=false
			#print(\"you dead\")
			player_died.emit()
			speed = 0
			gravity = 0
			velocity = Vector2(0,0)
			$Camera2D.position_smoothing_enabled = false
			deceleration = 1
			jump_force = 0
				
		
#</attack and health>
#endregion
#region Speed ability [Q]

### <Speed Ability> ###
func extra_speed(number):
	$Sprite2D2.visible=true
	speed += number
	can_extraspeed = false
	jump_force = jump_force * (number / 100) + 1100 # please forgive me for what monstrocity I have created
	#print(\"activatd speed\")
	await wait(8)
	jump_force = -600
	#print(\"DE-activated speed\")
	speed -= number
	$Sprite2D2.visible=false
	await wait(16)
	can_extraspeed = true
	
	
#endregion


func _on_coyote_timer_timeout() -> void:
	in_coyote = false
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_pkm1a"]
radius = 32.0
height = 216.0

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_ct4rk"]
bg_color = Color(0.00392157, 0, 0, 0.854902)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_imami"]
bg_color = Color(0.882353, 0.156863, 0.270588, 1)

[sub_resource type="GDScript" id="GDScript_vbl6h"]
script/source = "extends ProgressBar

#func _on_character_body_2d_player_health_changed(Health, maximum_player_health):
#	Health -= 1
	#value = Health
"

[node name="CharacterBody2D" type="CharacterBody2D"]
collision_mask = 6
script = SubResource("GDScript_isu8i")
max_walljump = -2

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, -5)
shape = SubResource("CapsuleShape2D_pkm1a")

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2(0.5, 0.5)
position_smoothing_enabled = true
script = ExtResource("1_dbdjp")

[node name="Sprite2D3" type="Sprite2D" parent="Camera2D"]
visible = false
texture = ExtResource("6_lrwgo")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("2_dkc7v")
hframes = 3
frame = 1

[node name="death_screen" type="Sprite2D" parent="."]
visible = false
position = Vector2(0.499959, 0.5)
scale = Vector2(1.19948, 1.19907)
texture = ExtResource("4_tuknr")
script = ExtResource("5_nksik")

[node name="Sprite2D2" type="Sprite2D" parent="."]
visible = false
texture = ExtResource("6_lrwgo")

[node name="HUD" type="CanvasLayer" parent="."]

[node name="HealthBar" type="ProgressBar" parent="HUD"]
anchors_preset = -1
anchor_left = -26.913
anchor_top = 17.837
anchor_right = -13.326
anchor_bottom = 20.065
offset_left = 31005.8
offset_top = -11557.4
offset_right = 15681.6
offset_bottom = -12970.1
theme_override_styles/background = SubResource("StyleBoxFlat_ct4rk")
theme_override_styles/fill = SubResource("StyleBoxFlat_imami")
step = 0.2
value = 100.0
allow_greater = true
show_percentage = false
script = SubResource("GDScript_vbl6h")

[node name="CoyoteTimer" type="Timer" parent="."]

[connection signal="player_died" from="." to="death_screen" method="_on_character_body_2d_player_died"]
[connection signal="player_health_Changed" from="." to="HUD/HealthBar" method="_on_character_body_2d_player_health_changed"]
[connection signal="timeout" from="CoyoteTimer" to="." method="_on_coyote_timer_timeout"]
